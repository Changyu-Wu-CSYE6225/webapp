# Build ami on merge
name: build artifact and ami

on:
  push:
    branches: [main]

jobs:
  build_artifact_and_ami:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Use Node.js 16.x
        uses: actions/setup-node@v3
        with:
          node-version: 16.x
          cache: "npm"
      # Run unit test
      - name: Install dependencies
        run: npm ci
      - name: Test
        run: npm test
      # Build artifact
      - name: Build Deployment Application Artifact (.zip)
        run: |
          zip -r ./webapp.zip ./*
      # Build AMI
      - name: Set up AWS dev credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Build Packer Template
        run: |
          packer fmt ./ami/ami.pkr.hcl
          packer init ./ami/ami.pkr.hcl
          packer validate -var-file="./ami/ami.pkrvars.hcl" ./ami/ami.pkr.hcl
          packer build -var-file="./ami/ami.pkrvars.hcl" ./ami/ami.pkr.hcl
        env:
          PACKER_LOG: 1 # enable debug log for packer

      # Deployment
      - name: Set up AWS demo credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEMO }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEMO }}
          aws-region: ${{ secrets.AWS_REGION }}
      # Get the latest AMI id and aws_launch_template id; Create new aws_launch_template version
      - name: Update aws_launch_template version
        run: |
          launch_template_names=asg_launch_config
          ami_id=$(aws ec2 describe-images --owners 985814182959 --query 'reverse(sort_by(Images, &CreationDate))[0].ImageId' --output text)
          launch_template_id=$(aws ec2 describe-launch-templates --launch-template-names $launch_template_names --query 'LaunchTemplates[0].LaunchTemplateId' --output text)
          aws ec2 create-launch-template-version \
              --launch-template-id $launch_template_id \
              --version-description webapp_v2 \
              --source-version 1 \
              --launch-template-data "ImageId=$ami_id"

          # Update Auto Scaling group with latest aws_launch_template version
          auto_scaling_group_name=autoscaling_group
          aws autoscaling update-auto-scaling-group \
            --auto-scaling-group-name $auto_scaling_group_name \
            --launch-template LaunchTemplateName=$launch_template_names,Version=$(
                aws ec2 describe-launch-template-versions \
                    --launch-template-name $launch_template_names \
                    --query 'reverse(sort_by(LaunchTemplateVersions, &VersionNumber))[0].VersionNumber'
                )
                
          # Refresh instance
          aws autoscaling start-instance-refresh \
            --auto-scaling-group-name $auto_scaling_group_name \
            --preferences MinHealthyPercentage=50
